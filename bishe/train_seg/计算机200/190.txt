日月 光华   - -   SE 精华区 文章 阅读 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   发信人 :   jiachong   ( 甲虫 ) ,   信 区 :   SE 
 标     题 :   [ 转载 ] 7 . 净室 软件工程 介绍                                           jiachong   
 发信站 :   日月 光华   ( 2003 年 04 月 09 日 12 : 48 : 22   星期三 ) ,   站 内 信件 
 
 【   以下 文字 转载自   SE   讨论区   】 
 【   原文 由   jiachong   所 发表   】 
 - - bluefield 整理 
 
 净室 软件工程 介绍 
 一 、   净室 方法 概述 
 1 ．   净室 概念 
 净室 （ cleanroom ） 软件工程 室 一种 应用 数学 和 统计学 以 经济 的 方式 生产 高质量 软件 的 工 
 程 技术 。 “ 净室 ” 这个 词 来源于 半导体 工业 的 生产 硬件 的 净室 。 在 硬件 生产 过程 中 ， 严 
 格 的 工程 过程 预防 了 缺陷 的 产生 ， 而 不是 事后 再 去 排除故障 。 净室 技术 的 重点 在于 通过 
 设计 和 测试 中 的 质量 认证 来 保证 软件开发 的 正确性 。 净室 方法 植根于 科学 ， 它 的 应用 可 
 提高 软件 生产 效率 并 获得 软件 运行 可靠性 ， 从而 成为 一个 工程 过程 。 净室 软件工程 有 两 
 个 重要 目标 ： 一是 开发 过程 的 可管理性 ， 二是 使用 时 无 失效 。 
 2 ．   净室 基础 
 （ 1 ）   函数 理论 
 净室 开发方法 基于 数学 中 的 函数 理论 。 一个 程序 的 规范 就是 一个 函数 的 规范 ， 描述 了 一 
 个 程序 的 定义域 （ 或 输入 序列 ） 到 值域 （ 或 输出 空间 ） 的 映射 。 一个 定义明确 （ well - d 
 efined ） 的 函数 有 如下 特性 ： 完备 性 、 一致性 和 正确性 。 
 （ 2 ）   统计 理论 
 净室 测试方法 基于 统计学 。 在 软件测试 中 ， 用于 采样 的 全体 （ population ） 是 所有 可能 
 使用 情况 的 集合 。 其中 集合 中 的 每个 元素 代表 系统 的 一种 可能 运行 情况 。 统计 的 目的 是 
 度量 系统 正确 运行 一个 样本 的 能力 。 因为 总体 是 无限 的 ， 完全 的 测试 是 不 可能 的 ， 所以 
 必须 利用 统计学 方法 来 对系统 性能 做 一个 有效 的 推理 。 在 净室 软件工程 中 ， 统计 测试 既 
 可 用于 产品 检测 ， 也 可 用于 过程 检测 。 
 （ 3 ）   净室 小组 的 工作 
 净室 是 面向 小组 的 方法 。 净室 开发 小组 完成 三项 主要 工作 ： 制定 系统 规范 、 开发 和 认证 
 。 评审 是 净室 小组 的 一项 重要 工作 。 每个 产品 从 最初 的 概念 到 最后 形成 都 要 经历 多次 评 
 审 。 有 两种 评审 。 一种 称为 开发 评审 ， 开发 评审 的 焦点 集中 于 技术 策略 、 好 的 想法 以及 
 小组 培训 和 交流 。 所 走 工作 产品 的 简化 是 小组 评审 的 显著 目标 之一 。 最初 的 思路 几乎 从 
 来 都 不是 最好 的 ， 所以 评审 的 一个 关键 目标 是 在 规范 、 设计 和 验证 方面 找到 更好 的 思路 
 。 第二种 评审 称为 验证 评审 。 这种 评审 通过 形式化 方法 来 验证 工作 产品 的 正确性 和 完备 
 性 ， 这些 验证 通常 这样 进行 ， 设计者 以 口头 方式 注意 列举 其 满足 基于 函数 的 正确性 条件 
 的 理由 。 小组 顺序 检查 每个 条件 ， 不 允许 有 存在 异议 的 情况 。 任何 修改 必须 经过 后续 评 
 审 的 重新 验证 。 一个 工作 产品 经过 验证 评审 而 不再 有 更改 的 必要 就 被 认为 是 正确 和 完备 
 的 。 
 3 ．   净室 技术 
 净室 软件工程 可用 如下 三个 关键技术 来 刻画 ： 
 （ 1 ）   置于 统计 过程 控制 之下 的 增量 开发 
 增量 开发 基于 产品开发 中 受控 迭代 的 工程 原理 ― 控制 迭代 。 增量 开发 不是 把 整个 开发 过 
 程 作为 一个 整体 ， 而是 将 其 划分 为 一系列 较 小 的 、 积累 的 增量 。 每个 增量 都 时 积累 的 ， 
 也 就是 所有 以前 的 增量 加上 新 的 工作 而 不断 积累 。 增量 开发 是 开发 小组 保持 对 项目 智能 
 控制 的 基础 。 因为 小组 成员 在 任何时刻 只 需 把 注意 立即 终于 工作 的 一部分 ， 而 不是 一次 
 考虑 所有 的 事情 。 
 增量 开发 把 一个 净室 项目 分成 一个 有序 的 开发周期 序列 。 在 每个 周期 完成 一些 用户 功能 
 。 在 每个 增量 开发 完成 时 ， 产品 的 功能 便 可 向 客户 演示 。 这样 客户 对 产品 有 真实 的 改观 
 认识 ， 他们 可不 受约束 重新 确认 需求 或时 需求 更加 清晰 。 这 将 使 产品 在 完成 时 双方 的 不 
 满 程度 降到 最低 。 
 （ 2 ）   基于 函数 的 规范 、 设计 和 验证 
 净室 采用 的 方法 不仅 有 坚实 的 理论 基础 ， 而且 可操作性 也 很 好 。 规范 从 一个 外部 视图 （ 
 称之为 黑盒 ） 开始 ， 然后 被 转化成 一个 状态机 视图 （ 称之为 状态 盒 ） ， 最后 由 一个 过程 
 （ 明盒 ） 来 实现 。 这些 形式 上 不同 、 行为 上 等价 的 视图 统称 为 盒子 结构 。 盒子 结构 是 基 
 于 对象 的 ， 并 支持 软件工程 的 关键 原则 ： 信息 隐藏 和 实现 分离 。 
 （ 3 ）   统计 测试 和 软件 认证 
 净室 测试方法 采用 统计学 的 基本原理 ， 既 当 总体 太大时 必须 采取 抽样 的 方法 。 首先 确定 
 一个 使用 模型 来 代表 系统 所有 可能 使用 的 （ 一般 是 无限 的 ） 总体 。 然后 由 使用 模型 产生 
 测试用例 。 因为 测 使用 历史 用体 的 一个 随机样本 ， 所以 可 得到 系统 预期 操作 性能 的 有效 
 的 统计 推导 。 使用 模型 是 指 系统 使用 中 所有 可能 的 情形 及其 发生 的 概率 。 使用 模型 可 有 
 许多 形式 （ 包括 马尔可夫 模型 盒 形式化 的 语法 ） 来 表示 。 在 马尔可夫 模型 中 ， 使用 模型 
 是 一个 状态机 组成 ， 状态 之间 由 转移 弧线 连接 ， 转移 弧线 指 系统 测试 时 可能 的 激励 ， 并 
 有 一个 概率 值 与 之 对应 。 概率 指从 给定 状态 进行 特定 转移 的 可能性 大小 。 从 起始 状态 穿 
 过 模型 到 终点 状态 变得 到 了 一个 测试用例 。 
 使用 模型 是 可 重用 的 资源 ， 它 能 产生 任意 数目 的 侧 使用 例 。 实际上 ， 测试 一个 系统 可采 
 用 多种 使用 模型 ， 对 每种 使用 模型 可 采用 多种 概率分布 。 例如 ， 许多 系统 提供 一些 很少 
 使用 的 功能 ， 但 这些 功能 处理 失误 的 后果 很 严重 ， 如 在 核电厂 关闭 反应堆 。 这种 功能 在 
 一般 的 使用 模型 中 的 执行 概率 是 很小 的 。 当 集中 测试 这种 能 产生 重大 后果 的 功能 时 ， 需 
 要 采用 严格 安全 使用 模型 、 冒险 使用 模型 、 恶意 使用 模型 或 其他 特定 环境 使用 模型 。 
 这些 技术 可 分开 使用 ， 也 可以 一起 使用 。 采用 这些 技术 可 改进 软件 生产 过程 。 
 4 ．   净室 过程 
 净室 参考模型 （ CRM ） 为 净室 项目 运行 定义 了 一套 完整 的 过程 和 工作 产品 。 CRM 由 14 个分 
 别 对应 于 软件 管理 、 规范 、 开发 和 认证 的 独立 过程 组成 ： 
 l   管理 过程 包括 项目 计划 、 项目管理 、 性能 改进 以及 工程 变更 。 
 l   规范 过程 包括 需求 分析 、 功能 规范 、 使用 规范 、 结构 规范 和 增量 计划 。 
 l   开发 过程 包括 软件 再 工程 、 增量 设计 和 正确性 验证 。 
 l   认证 过程 包括 使用 建模 、 测试计划 、 统计 测试 和 认证 。 ] 
 二 、   增量 式 开发 的 净室 管理 
 统计 质量 控制 之下 的 增量 式 开发 是 软件 项目 建立 和 保持 管理控制 的 净室 途径 。 在 使用 净 
 室 方法 时 ， 软件产品 是 以 一系列 功能 增量 的 形式 开发 的 ， 这些 增量 合 起来 就 形成 了 最终 
 的 产品 。 最 稳定 的 需求 被 首先 实现 。 这些 增量 的 集成 是 自顶向下 来 进行 的 。 
 1 ．   增量 式 开发 的 优点 
 （ 1 ）   进展 的 可见 性 
 例用 增量 式 开发 ， 每 一步 增量 实现 了 一个 或 多个 最终用户 功能 。 每 一步 增量 包含 所有 早 
 期 的 已 开发 的 功能集 机上 一些 新 的 功能 ； 系统 再 逐步 积累 的 增量 中 增长 。 例如 ， 在 早期 
 增量 结束 时 ， 开发者 可以 很 有 信心 的 说 ： 系统 的 20% 已 100% 完成 了 ， 而 不是 推测 系统 已 完 
 成 了 20% 。 
 （ 2 ）   智能 控制 
 增量 时 开发 通过 引用 透明性 ， 实现 了 整个 系统 开发 过程 中 的 智能 控制 。 当 拥有 引用 透明 
 性时 ， 一个 系统 的 部件 无需 回溯 就 能 根据 其子 规范 得以 实现 。 无需 重做 前期 增量 。 这种 
 策略 有利于 在 一个 完整 系统 中 对 每个 增量 进行 正确性 验证 。 
 （ 3 ）   增量 系统集成 
 净室 增量 式 开发 允许 在 整个 开发 生命期 引用 透明 的 用户 函数 增量 的 连续 集成 。 因为 每一 
 步 增量 设计 基于 一个 已 验证 的 子 规范 和 前期 增量 已 测试 的 接口 ， 因此 ， 几乎 没有 更深 的 
 设计 和 接口 错误 。 较 好 的 定义 增量 贯穿 于 整个 系统 开发 过程 ， 系统 在 良好 定义 的 增量 忠 
 言化 。 测试 和 验证 工作 始于 开发周期 早期 。 
 （ 4 ）   连续 质量 反馈 贯穿 统计 过程 控制 
 已 在 净室 中 实践 的 增量 式 开发 为 统计 过程 控制 提供 了 基础 。 每 一个 净室 增量 都 是 过程 的 
 一个 完整 周期 ， 包含 规范 、 开发 和 新 的 用户 函数 的 验证 ， 加上 到 目前为止 所有 已 完成 工 
 作 的 测试 。 作为 统计 过程 控制 的 典型 ， 把 过程 的 每 一次 反复 的 性能 度量 与 性能 目标 相比 
 较 ， 以 决定 是否 过程 一直 在 控制 之下 （ 即 是否 正如 所 期望 的 那样 发生 ） 。 
 （ 5 ）   用户 使用 中 不断 的 功能 反馈 
 增量 式 开发 有助于 用户 对 一个 进化 系统 的 执行 功能 做出 尽早 的 不断 的 反馈 ， 必要 时 允许 
 改变 。 因为 增量 执行 于 系统 环境 并 代表 了 用户 功能 的 子集 ， 早期 的 增量 能 通过 用户 对系 
 统 功能性 和 实用性 的 检测 来 反馈 。 这种 反馈 有助于 避免 开发 出 实效 的 系统 和 建立 用户 可 
 接受 的 最终 产品 。 
 （ 6 ）   变更 的 适应性 
 在 系统 需求 和 性 努 环境 中 增量 室 开发 允许 不可避免 变更 的 系统 适应性 。 在 每 一步 增量 完 
 成时 ， 系统 需求 的 积累 变更 所 产生 的 影响 能 根据 当前 规范 和 增量 设计 来 评估 。 如果 变更 
 于 将来 增量 相互 独立 ， 则 通常 与 现已 存在 的 增量 开发计划 相 合并 ， 并 对 进度 和 资源 进行 
 可能 的 调整 。 如果 变更 影响 已 完成 的 增量 ， 自顶向下 修改 系统 开发 ， 通常 重用 绝大多数 
 已 存在 的 增量 代码 （ 通常 是 全部 ） ， 按照 要求 的 进度 和 资源 来 进行 相应 调整 。 
 （ 7 ）   进度 与 资源管理 
 项目 资源 在 增量 式 开发 全过程 中能 在 可 控制 的 方式 下 分配 。 可用 进度 是 决定 待 开发 的 增 
 量 数量 和 其 规模 的 一个 因素 。 在 短 进度 中 ， 小规模 增量 将 有助于 在 增量 交付 与 认证 组织 
 间 维持 充分 的 时间段 ， 允许 一个 有序 的 测试 过程 。 然而 ， 这 将 给 项目 开发 小组 设计 和 实 
 现更大 、 更 复杂 的 增量 带来 更 多 负担 。 进度 和 复杂性 的 折衷 能够 反映 增量 式 开发计划 。 
 另外 ， 从 后续 增量 得到 的 反馈 ， 为 过程 和 产品 性能 的 目标 度量 提供 了 管理 ， 以 允许 在 开 
 发和 测试 中 对 不足 和 意外 收获 的 适应 。 
 2 ． 增量 式 开发 的 理论 基础 
 净室 过程 中 的 增量 是 开发技术 是 基于 引用 透明性 原理 的 。 引用 透明性 意味着 一个 表达式 
 所 关心 的 唯一 的 事情 是 它 的 值 ， 能用 其值 相等 的 子 表达式 代替 。 软件 增量 式 开发 的 基础 
 在于 为 程序 制定 数学 函数 规则 。 这种 观点 认为 程序开发 作为 一种 自顶向下 的 控制结构 或 
 子函数 （ 子 规范 ） 的 函数 改进 过程 ， 这种 改进 将 导致 基于 对象 或 函数 分解 ， 或者 是 二者 
 的 结合 。 因为 引用 透明性 ， 任何 精 化步骤 的 验证 能够 与 其它 精 化步骤 相互 独立 进行 ， 这 
 就 意味着 ， 在 系统 的 大部分 组件 写出 之前 ， 在 早期 的 增量 中 ， 系统 的 体系结构 能够 被验 
 证 ， 在 后期 的 增量 中 ， 体系结构 不需 重新 验证 。 
 三 、   净室 软件 规范 
 根据 结构化编程 的 理论 ， 无论 多么 复杂 的 程序结构 都 可用 分层 结构 中 的 三种 基本 控制 结 
 构 ： 顺序 ， 选择 和 循环 嵌套 而成 。 然而 ， 软件系统 的 开发 不仅仅 需要 系统控制 流 ， 如今 
 的 大规模 系统 涉及 整个 企业 中 大量 数据 的 存储 、 检索 、 传送 和 处理 数据 的 操作 。 在 缺乏 
 工程 基础 的 系统 开发 中 ， 这些 操作 使 数据 复杂性 不断 积累 ， 从而 难以 控制 。 净室 软件 规 
 范和 设计 使用 了 三种 系统结构 ─ 黑盒 、 状态 盒 和 明盒 ， 统称 为 盒子 结构 。 这些 结构 体现 
 了 数据 封装 和 数据 隐藏 的 重要 概念 。 在 逐步求精 和 验证 过程 中 开发 盒子 结构 ， 并 将 系统 
 控制 和 数据 操作 结合 起来 。 系统 的 开发 就是 把 这些 结构 以 一种 可 证明 的 方式 逐层 嵌套 和 
 排序 。 
 1 ．   净室 规范 和 设计 的 盒子 结构 
 盒子 结构 是 在 规范 和 设计 中 对 现实 系统 的 外 在 基本 属性 的 功能 描述 。 有 三种 盒子 ： 黑盒 
 、 状态 盒 、 明盒 。 这些 盒子 不仅 展示 了 外部 行为 ， 而且 还 提高 了 内部 可见度 。 黑盒 确定 
 了 一个 系统 或 系统 组件 的 外部 行为 。 状态 盒则 进一步 指定 了 完成 外部 行为 所 需 的 状态 数 
 据 。 明盒 则 进一步 把 状态 盒 具体化 ， 它 确定 了 完成 状态 和 行为 的 过程 设计 。 它 可是 用 已 
 有 的 黑盒 或 引入 新 的 黑盒 ， 这些 黑盒 将 在 以后 细化 （ 明盒 由 程序控制 结构 组成 ） ， 每步 
 细化 是 根据 前 一步 进行 验证 的 。 这样 盒子 结构 将 系统 开发 的 三个 方面 （ 行为 、 数据 和 过 
 程 的 规范 ） 分 离开 ， 但 又 把 它们 联成 一个 细化 和 验证 的 内聚 过程 。 
 （ 1 ）   黑盒 行为 
 黑盒 定义 了 一个 系统 或 系统 组件 的 外部 行为 。 当 系统 接受 激励 S （ 视为 从 其 环境 的 输入 ） 
 时 ， 它 将 产生 相应 R （ 作为 对 其 环境 的 输出 ） ， 响应 不仅 与 当前 激励 有关 ， 还 与 到 目前 为 
 止 收到 的 激励 有关 。 
 黑盒 行为 的 数学 语义 可 写成 如下 函数 ： 
                                 历史 激励 → 响应 
 简记 为                     SH → R 
 SH 表示 包括 当前 激励 的 所有 历史 激励 。 
 黑盒 定义 不 包含 状态 数据 及 过程 实现 。 它 定义 了 仅 取决于 于 历史 使用 的 能 被 用户 感受 到 
 的 外部 可见 行为 。 因此 ， 黑盒 关心 的 是从 用户 角度 看待 系统 行为 的 问题 ， 而 并 不 考虑 状 
 态 和 过程 的 设计 。 黑盒子 规范 定义 了 所有 可能 使用 情况 所 需 的 行为 。 也就是说 ， 在 黑盒 
 规范 中为 所有 可能 的 当前 激励 盒 历史 激励 以及 它们 的 组合 定义 了 正确 的 响应 ， 在 净室 项 
 目 中 黑盒 规范 的 如下 三个 原则 对 高效 系统 开发 很 关键 。 
 l   对系统 拥有者 和 用户 而言 ， 黑盒 定义 了 他们 分析 和 协商 的 所 需 行为 ， 这是 他们 准备 资 
 源 、 着手 开发 和 测试 的 前提 。 
 l   对系统 开发者 而言 ， 黑盒 定义 了 待 设计 和 实现 的 所 需 行为 。 
 l   对系统 测试者 而言 ， 黑盒 定义 了 在 测试 过程 中待 确认 的 所 需 行为 。 
 （ 2 ）   状态 盒 行为 
 状态 盒 规范 对系统 或 其 组件 进行 初步 细化 ， 定义 了 状态 空间 。 状态 盒 把 激励 历史 封装 成 
 状态 数据 ， 但 仍 没有 涉及 具体 过程 。 它 把 旧 的 状态 OS 和 激励 S 映射 到 新 的 状态 NS 和 响应 R 
 。 而 新 的 状态 在 下 一次 变换 时则 变成 了 旧 状态 。 状态 盒 行为 的 于 一 是 一个 如下 的 变换 函 
 数 ： 
 （ 旧 状态 ， 激励 ） → （ 新 状态 ， 响应 ） 
                 或 简写 为               （ OS ， S ） → （ NS , R ） 
                 状态 盒 根据 黑盒 来 细化 和 验证 。 状态 信息 就是 为了 符合 黑盒 规范 而 必须 保存 的 
 激励 历史 ， 这样 的 信息 来自 于 黑盒 ， 无需 再 定义 。 因为 每个 历史 激励 可用 状态 来 表示 ， 
 所以 每个 黑盒 有意 个 状态 盒 描述 。 而且 ， 对于 一个 黑盒 ， 可 设计 许多 不同 的 状态 盒 ， 因 
 为 对 一个 状态 可能 有 多种不同 的 表示 和 访问 方法 。 
                 状态 盒 的 验证 是 导出 相应 黑盒 行为 并 与 原来 的 黑盒 相 比较 看 是否 等价 。 这种 导 
 出 就是 将 状态 操作 转换成 激励 历史 形式 。 
 （ 3 ）   明盒 行为 
 系统 或 其 组件 的 明盒 设计 定义 了 状态 盒 行为 的 过程 。 明盒 是 一个 计算机程序 或 程序 集 ， 
 基于 程序 的 内部 状态 OS ， 它 接受 激励 S ， 产生 新 的 内部 状态 NS ， 并 产生 响应 R 。 这些 过程 
 由 基于 结构化程序 设计 的 控制结构 （ 顺序 、 选择 、 循环 ， 如果 引入 并发 机制 还要 加上 并 
 行 结构 ） 来 定义 。 明盒 用 这些 控制结构 来 完成 新 状态 和 相应 的 计算 。 对于 所 给 状态 盒 可 
 以 定义 多种不同 的 明盒 。 明盒 可用 一个 变换 函数 表示 ： 
 （ 旧 状态 ， 激励 ） → （ 新 状态 ， 响应 ） ， 借助 过程 
                 或 简记 为 ： 
 （ OS ， S ） → （ NS ， R ） ， 借助 过程 
                 明盒 的 过程 可以 重用 已有 的 黑盒 ， 也 可 在 后续 求精 过程 过程 的 状态 盒于 明盒 中 
 引入 新 的 黑盒 。 定义 明盒 是 一个 关键步骤 ， 因为 它 必须 组织 和 连接 处于 一个 盒子 结构层 
 次 的 黑盒 。 通过 定义 每个 黑盒 用途 的 准确 内容 ， 这种 显式 的 连接 有助于 对 项目 开发 保持 
 智能 控制 。 另外 ， 组建 及其 连接 是从 明盒 设计 中 局部 处理 需求 导出 的 。 
                 明盒 的 验证 是 把 其 操作 抽象 成 一个 导出 的 状态 盒 并 与 原来 的 状态 盒 进行 比较 。 
 
 2 ．   盒子 结构 层次 
 盒子 结构 层次 随着 逐步求精 和 验证 而 不断 进化 。 一个 初始 黑盒 可以 被 细化 为 一个 状态 盒 
 ， 再 细化 为 一个 明盒 。 明盒 的 控制结构 在 下 一个 层次 可以 包含 若干 黑盒 。 这些 黑盒 可以 
 是 相同 的 ， 也 可 不同 ， 或者 是 几个 的 组合 。 
 3 ．   基于 序列 的 规范 过程 
 规范 制订 有 很多 方法 。 基于 顺序 的 规范 是 指 逐步 构造 出 完备 、 一致 和 正确 的 黑盒 和 状态 
 盒 规范 的 过程 。 
 在 基于 序列 的 规范 过程 中 ， 按 严格 顺序 系统 的 举出 所有 可能 的 激励 （ 历史 激励 ） 序列 ， 
 如 按 长度 0 ， 1 ， 2 … 排列 。 因为 每个 序列 映射 到 其 正确 的 响应 ， 所以 可 通过 应用 规约 规则 
 辨识 等价 序列 ， 当 完备 和 一致 的 定义 了 系统 以后 枚举 过程 结束 。 
 四 、   净室 软件 认证 
 统计 测试 时 ， 需要 开发 出 软件 投入 运行 时 的 使用 模型 ， 测试用例 由该 使用 模型 随机 产生 
 。 然后 按照 数学 和 统计学 模型 对 结果 进行 分析 ， 获取 软件 的 质量 度量 ， 并 判断 测试 的 充 
 分性 。 传统 的 测试方法 （ 如白盒 测试 ， 回归 测试 ） 是 净室 统计 使用 测试方法 的 一种 补充 
 ， 因此 ， 不必 放弃 该 方法 ， 不过 ， 大量 实践 表明 ， 基于 使用 模型 的 测试 更 经济 有效 ， 并 
 且 能 获得 实用软件 的 高可靠性 。 
 1 ．   基于 使用 模型 的 统计 测试 的 优点 
 软件系统 的 基于 使用 模型 的 统计 测试 提供 了 软件产品 和 过程 质量 的 度量 标准 ， 它 将 用于 
 软件 的 整个 生命期 的 管理 和 决策 。 由于 使用 模型 是 基于 规范 而 不是 基于 代码 的 ， 因此 ， 
 源于 模型 构筑 的 洞察 可 用于 产生 在 工程 的 早期 阶段 避免出现 问题 的 有 价值 的 管理决策 。 
 
 l   需求 确认 
 使用 模型 式 系统 规范 的 外部 视图 ， 它 必须 容易 的 被 系统 工程师 、 开发人员 、 客户 和 终端 
 用户 所 理解 。 在 投入 运行 的 环境 中 ， 当对 该 使用 模型 （ 包括 可能 的 输入 、 可能 的 输入 序 
 列 以及 期望 的 输出 ） 进行 系统 的 评审 时 ， 接口 和 需求 往往 被 简化 或 明确 。 
 l   资源 和 进度 预测 
 基于 一个 使用 模型 的 标准 计算 ， 为 成果 、 进度 和 成本 估算 提供数据 。 
 l   人工 挑选 非 随机 测试用例 
 依据 一定 的 约定 或 规则 ， 通过 模型 检查 确定 特殊 的 测试用例 ， 以 确保 测试 了 特定 的 测试 
 序列 。 
 l   自动 生成 测试用例 
 最小 覆盖 的 测试 脚本 （ 对模型 完全 覆盖 的 最少 测试 事件 ） 和 随机 测试用例 （ 依据 使用 概 
 率 分布 ） 可 由 测试 模型 自动 生成 。 模型 覆盖 测试 确保 了 在 随机 测试 开始 之前 模型 的 最低 
 功能 ， 而且 随机 测试 为 投入 运行 时 的 可靠性 评估 提供 了 依据 。 
 l   有效 的 、 高效 的 测试 
 不同 的 缺陷 并 不同 等 的 产生 失效 。 位于 频繁 便利 路径 上 的 缺陷 比 那些 位于 非 频繁 路径 上 
 的 缺陷 更 有 可能 导致 失效 。 随即 测试 的 动机 源于 这样 一个 简单 的 事实 ： 发现 失效 是 根据 
 现场 运行 时 失效 导致 故障 的 大致 顺序 。 测试 的 预算 主要 用来 通过 测试 来 最大 限度 的 提高 
 软件 在 投入 运行 时 的 可靠性 。 
 l   聚焦 测试 
 使用 模型 允许 对 特别 序列 的 有 偏 抽样 ， 譬如 对非 频繁 使用 但 极为重要 的 功能 序列 抽样 。 
 可以 为 这些 功能 形成 单独 的 模型 ， 或者 对 原始 模型 进行 变换 和 抽样 以 去处 偏置 。 
 l   量化 测试 管理 
 基于 使用 模型 的 统计 测试 ， 为 决策 测试 是否 完成 或 软件 是否 可 发布 提供 了 定量 的 标准 。 
 期望 使用 （ 在 使用 模型 中 所 表征 ） 与 测试 使用 （ 在 测试 中 所 记录 ） 的 统计 误差 作为 测试 
 充分性 的 度量 值 。 
 l   可靠性 预测 
 在 一定 的 统计 测试 协议 下 ， 测试 时 可以 从 软件 的 性能 中 获得 预期 运行 性能 的 有效 预测 。 
 实际 的 测试 结果 （ 即 对 每 一 输入 的 正确 的 和 不 正确 的 情况 ） 作为 使用 模型 的 权重 记录 下 
 来 ， 并且 该 模型 的 计算结果 提供 了 投入 运行 时 的 可靠性 预测 。 
 2 ．   统计 测试 的 理论 基础 
 l   样本 与 总体 
 就 统计 测试 而言 ， 软件测试 被 看作 是 一个 统计学 方法 的 问题 。 县 产生 软件 所有 可能 使用 
 的 一个 子集 ， 并 以 这个 自己 所 表现 的 性能 作为 依据 来 考虑 整体 使用性能 。 换句话说 ， 就 
 是 通过 样本 来 描述 总体 。 
 作为 一个 出发点 ， 这种 类比 的 前提 是 ： 不 可能 对 软件 的 所有 可能 应用 都 进行 测试 ， 所有 
 可能 的 使用 情景 将 不会 被 彻底 测试 。 问题 的 关键 就 在于 如何 描述 使用 总体 以及 如何 形成 
 用 例子 集 。 如果 对 软件 的 测试 控制 合理 ， 那么 ， 由 描述 恰当 的 总体 的 一个 随机 测试用例 
 ， 通过 投入 运行 时 的 使用 测试 ， 我们 可以 得到 总体 的 一个 有效 描述 ， 而 对于 其他 的 用例 
 子集 而言 ， 无论 多么 全面 的 构筑 都 是 不 可能 的 。 
 l   软件 使用 的 随机 属性 
 软件 的 使用 的 过程 被 认为 是 一个 随机 过程 。 序列 中 的 下 一个 事件 只 依赖于 当前 而 与 过去 
 无关 。 
 五 、   与 其它 方法 的 比较 
 1 ．   净室 与 CMM 
 CMM 为 软件 过程 改进 提供 了 一个 良好 的 定义 范例 ， 在 许多 组织 中 得到 了 成功 的 应用 。 净室 
 软件工程 为 软件 规范 、 开发 、 测试 和 认证 提供 了 良好 的 理论 基础 和 实践 。 CMM 主要 关注 管 
 理 和 组织 方面 ， 而 净室 则 主要 关注 技术 和 工程 实践 方面 。 二者之间 有 相当 一部分 是 相互 
 重叠 的 ， 但 也 有 一些 部分 是 另一方 没有 涉及 的 。 
 例如 ， 在 CMM 第二级 的 关键 过程 域 中 ， 就 有 一部分 是 在 净室 的 范围 之外 。 配置管理 和子合 
 同 管理 是 重要 的 管理 问题 ， 但是 净室 没有 涉及 它们 。 另一方面 ， 净室 加强 了 软件开发 的 
 数学 基础 以及 软件测试 的 统计 基础 ， 而 CMM 没有 涉及 这些 方法 的 优点 。 
 总体而言 ， CMM 和 净室 是 兼容 和 互补 的 。 把 CMM 的 管理 、 组织 能力 和 净室 技术 结合 起来 是 
 一种 强有力 的 过程 改进 方法 。 基于 技术 得 净室 实践 为 CMM 定义 的 “ what ” 提供 了 许多 “ h 
 ow ” 。 
 2 ．   净室 与 面向对象 
 （ 1 ）   相同 的 特性 
 对于 生命周期 ， 净室 遵循 增量 开发 而 OO 遵循 迭代 开发 。 这 两种 方法 都 是 试图 利用 用户 反 
 馈 和 适应 需求 变更 。 
 OO 中 的 用例 和 净室 的 使用 模型 都 属于 使用 场景 （ usage   scenario ） 。 这 两种 方法 都 是 在 
 开发 的 早期 阶段 来 定义出 用户 视图 。 它们 产生 的 结果 在 设计 和 测试 时 都 被 使用 到 了 。 它 
 们 都 使用 了 状态机 表示法 。 
 OO 和 净室 都 使用 了 重用 的 方法 。 OO 中 的 类 和 净室 中 的 公共服务 是 重用 的 基本 单元 。 
 净室 过程 为 面向对象 开发 提供 了 可管理性 和 技术 严密性 。 对象 从 本质 上 来说 是 封装 了 数 
 据 和 一系列 服务 的 状态机 。 一个 净室 组件 用 黑盒 视图 （ 一个 对象 的 外部 行为 ） 、 状态 盒 
 视图 （ 一个 对象 的 封装数据 ） 和 明盒 视图 （ 处理 外部 需求 和 访问 封装数据 的 服务 ） 来定 
 义 。 一个 净 是 组件 从技术上 讲 就是 一个 对象 。 净室 盒子 结构 有助于 产生 一个 完备 、 一致 
 和 正确 的 对象 行为规范 。 而且 ， 盒子 结构 有助于 定义 和 管理 数据 并且 控制数据 在 各个 对 
 象 之间 的 流动 。 
 在 净室 技术 中 ， 数学 形式化 方法 成为 规范 、 设计 、 正确性 验证 和 认证 测试 的 基础 。 这种 
 成熟 的 形式化 方法 可 为 相对 直观 的 面向对象 方法 增加 精确性 和 可预见性 。 净室 是 应用 工 
 程而非 领域 工程 的 一种 方法 。 面向对象 方法 的 普遍 力量 在于 寻求 某 领域 应用 特征 的 关系 
 和 抽象 。 面向对象 的 领域 分析 可 作为 净室 应用 工程 的 补充 。 
 六 、   结论 
 净室 软件工程 允许 在 生命周期 的 早期 发现错误 ， 这是 后来 的 昂贵 的 返工 的 可能性 降到 最 
 低 ， 并且 加速 了 软件 上市 时间 。 它 使 设计 变得 简化 ， 可验证 。 软件 质量 是 靠 设计 和 认证 
 来 保证 的 ， 而 不是 测试 。 净室 支持 原型 法 ， 面向对象 和 复用 。 这项 技术 室 与 平台 和 开发 
 语言 无关 的 ， 并且 生产率 很 高 。 净室 由 一系列 精化 和 变换 组成 ， 经过 这些 精化 和 变换 ， 
 也 就 一步步 从 需求 到 了 代码 。 每 一步 变换 都 要 根据 前 一级 精化 来 认证 ， 这 就是 错误 减 到 
 了 最少 。 净室 既 可以 应用 于 新 系统 也 可 应用 于 已经 存在 的 系统 。 
 
 - - 
 这个 世界 总会 有点 不 公正 
 但是 我们 总能 用心 去 平衡 
 ※ 来源 : ・ 日月 光华   bbs . fudan . edu . cn ・ FROM : [ 甲虫 窝 ] 
 ※   修改 : ・ jiachong   於   03 月 04 日 20 : 52 : 13   修改 本文 ・ [ FROM :   218.79 . 59.90 ] 
 - - 
 ※   转载 : ・ 日月 光华   bbs . fudan . edu . cn ・ [ FROM :   61.170 . 202.109 ] 
 
   
 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 [ 返回 上 一页 ]   [ 本 讨论区 ]