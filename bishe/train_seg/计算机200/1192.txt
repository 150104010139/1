日月 光华   - -   Programming 精华区 文章 阅读 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
   发信人 :   freshbird   ( 真 菜鸟 ~ 快乐 的 愚人 ) ,   信 区 :   Programming 
 标     题 :   学习 Linux 网络 编程 ( 2 )   
 发信站 :   日月 光华 站   ( Mon   Apr     2   16 : 53 : 51   2001 )   ,   站 内 信件 
 
 学习 Linux 网络 编程 ( 2 ) 
 3 .   服务器 和 客户机 的 信息 函数 
 这 一章 我们 来 学习 转换 和 网络 方面 的 信息 函数 . 
 3.1   字节 转换 函数 
 在 网络 上面 有着 许多 类型 的 机器 , 这些 机器 在 表示 数据 的 字节 顺序 是 不同 的 ,   比如 i386 芯 
 片 是 低字节 在 内存地址 的 低端 , 高字节 在 高端 , 而 alpha 芯片 却 相反 .   为了 统一 起来 , 在 Li 
 nux 下面 , 有 专门 的 字节 转换 函数 . 
 unsigned   long   int   htonl ( unsigned   long   int   hostlong ) 
 unsigned   short   int   htons ( unisgned   short   int   hostshort ) 
 unsigned   long   int   ntohl ( unsigned   long   int   netlong ) 
 unsigned   short   int   ntohs ( unsigned   short   int   netshort ) 
 在 这 四个 转换 函数 中 , h   代表 host ,   n   代表   network . s   代表 short   l   代表 long   第一个 函 
 数 的 意义 是 将 本 机器 上 的 long 数据 转化 为 网络 上 的 long .   其他 几个 函数 的 意义 也 差不多 
 . 
 3.2   IP 和 域名 的 转换 
 在 网络 上 标志 一台 机器 可以 用 IP 或者 是 用 域名 . 那么 我们 怎么 去 进行 转换 呢 ? 
 struct   hostent   * gethostbyname ( const   char   * hostname ) 
 struct   hostent   * gethostbyaddr ( const   char   * addr , int   len , int   type ) 
 在 中 有 struct   hostent 的 定义 
 struct   hostent { 
 char   * h _ name ;   / *   主机 的 正式 名称   * / 
 char   * h _ aliases ;   / *   主机 的 别名   * / 
 int   h _ addrtype ;   / *   主机 的 地址 类型   AF _ INET * / 
 int   h _ length ;   / *   主机 的 地址 长度   对于 IP4   是 4 字节 32 位 * / 
 char   * * h _ addr _ list ;   / *   主机 的 IP地址 列表   * / 
 } 
 # define   h _ addr   h _ addr _ list [ 0 ]   / *   主机 的 第一个 IP地址 * / 
 gethostbyname 可以 将 机器 名 ( 如   linux . yessun . com ) 转换 为 一个 结构 指针 . 在 这个 结构 里 
 面 储存 了 域名 的 信息 
 gethostbyaddr 可以 将 一个 32 位 的 IP地址 ( C0A80001 ) 转换 为 结构 指针 . 
 这 两个 函数 失败 时 返回 NULL   且 设置 h _ errno 错误 变量 , 调用 h _ strerror ( ) 可以 得到 详细 的 
 出错 信息 
 3.3   字符串 的 IP 和 32 位 的 IP 转换 . 
 在 网络 上面 我们 用 的 IP 都 是 数字 加点 ( 192.168 . 0.1 ) 构成 的 ,   而 在 struct   in _ addr 结构 中 
 用 的 是 32 位 的 IP ,   我们 上面 那个 32 位 IP ( C0A80001 ) 是 的 192.168 . 0.1   为了 转换 我们 可以 
 使用 下面 两个 函数 
 int   inet _ aton ( const   char   * cp , struct   in _ addr   * inp ) 
 char   * inet _ ntoa ( struct   in _ addr   in ) 
 函数 里面   a   代表   ascii   n   代表 network . 第一个 函数 表示 将 a . b . c . d 的 IP 转换 为 32 位 的 I 
 P , 存储 在   inp 指针 里面 . 第二个 是 将 32 位 IP 转换 为 a . b . c . d 的 格式 . 
 3.4   服务 信息 函数 
 在 网络 程序 里面 我们 有时候 需要 知道 端口 . IP 和 服务 信息 . 这个 时候 我们 可以 使用 以下 几 
 个 函数 
 int   getsockname ( int   sockfd , struct   sockaddr   * localaddr , int   * addrlen ) 
 int   getpeername ( int   sockfd , struct   sockaddr   * peeraddr ,   int   * addrlen ) 
 struct   servent   * getservbyname ( const   char   * servname , const   char   * protoname ) 
 struct   servent   * getservbyport ( int   port , const   char   * protoname ) 
 struct   servent 
 { 
 char   * s _ name ;   / *   正式 服务 名   * / 
 char   * * s _ aliases ;   / *   别名 列表   * / 
 int   s _ port ;   / *   端口号   * / 
 char   * s _ proto ;   / *   使用 的 协议   * / 
 } 
 一般 我们 很少 用 这 几个 函数 . 对应 客户端 , 当 我们 要 得到 连接 的 端口号 时 在 connect 调用 成 
 功后 使用 可 得到   系统 分配 的 端口号 . 对于 服务端 , 我们 用 INADDR _ ANY 填充 后 , 为了 得到 连 
 接 的 IP 我们 可以 在 accept 调用 成功 后   使用 而 得到 IP地址 . 
 在 网络 上 有 许多 的 默认 端口 和 服务 , 比如 端口 21 对 ftp80 对应 WWW . 为了 得到 指定 的 端口号 
 的 服务   我们 可以 调用 第四个 函数 , 相反 为了 得到 端口号 可以 调用 第三个 函数 . 
 3.5   一个 例子 
 # include 
 # include 
 # include 
 # include 
 # include 
 int   main ( int   argc   , char   * * argv ) 
 { 
 struct   sockaddr _ in   addr ; 
 struct   hostent   * host ; 
 char   * * alias ; 
 if ( argc < 2 ) 
 { 
 fprintf ( stderr , " Usage : % s   hostname | ip .. \ n \ a " , argv [ 0 ] ) ; 
 exit ( 1 ) ; 
 } 
 argv ++ ; 
 for ( ; * argv ! = NULL ; argv ++ ) 
 { 
 / *   这里 我们 假设 是 IP * / 
 if ( inet _ aton ( * argv , & addr . sin _ addr ) ! = 0 ) 
 { 
 host = gethostbyaddr ( ( char   * ) & addr . sin _ addr , 4 , AF _ INET ) ; 
 printf ( " Address   information   of   Ip   % s \ n " , * argv ) ; 
 } 
 else 
 { 
 / *   失败 , 难道 是 域名 ? * / 
 host = gethostbyname ( * argv ) ;   printf ( " Address   information 
 of   host   % s \ n " , * argv ) ; 
 } 
 if ( host = = NULL ) 
 { 
 / *   都 不是   , 算了 不 找 了 * / 
 fprintf ( stderr , " No   address   information   of   % s \ n " , * argv ) ; 
 continue ; 
 } 
 printf ( " Official   host   name   % s \ n " , host - > h _ name ) ; 
 printf ( " Name   aliases : " ) ; 
 for ( alias = host - > h _ aliases ; * alias ! = NULL ; alias ++ ) 
 printf ( " % s   , " , * alias ) ; 
 printf ( " \ nIp   address : " ) ; 
 for ( alias = host - > h _ addr _ list ; * alias ! = NULL ; alias ++ ) 
 printf ( " % s   , " , inet _ ntoa ( * ( struct   in _ addr   * ) ( * alias ) ) ) ; 
 } 
 } 
 在 这个 例子 里面 , 为了 判断 用户 输入 的 是 IP 还是 域名 我们 调用 了 两个 函数 , 第一次 我们 假 
 设 输入 的 是 IP 所以 调用 inet _ aton ,   失败 的 时候 , 再 调用 gethostbyname 而 得到 信息 . 
 4 .   完整 的 读写 函数 
 一旦 我们 建立 了 连接 , 我们 的 下 一步 就是 进行 通信 了 . 在 Linux 下面 把 我们 前面 建立 的 通道 
   看成 是 文件 描述符 , 这样 服务器端 和 客户端 进行 通信 时候 , 只要 往 文件 描述符 里面 读写 东 
 西 了 .   就象 我们 往 文件 读写 一样 . 
 4.1   写 函数 write 
 ssize _ t   write ( int   fd , const   void   * buf , size _ t   nbytes ) 
 write 函数 将 buf 中 的 nbytes 字节 内容 写入 文件 描述符 fd . 成功 时 返回 写 的 字节数 . 失败 时 
 返回 - 1 .   并 设置 errno 变量 .   在 网络 程序 中 , 当 我们 向套 接字 文件 描述符 写时 有 俩 种 可能 
 . 
 1 ) write 的 返回值 大于 0 , 表示 写 了 部分 或者 是 全部 的 数据 . 
 2 ) 返回 的 值 小于 0 , 此时 出现 了 错误 . 我们 要 根据 错误 类型 来 处理 . 
 如果 错误 为 EINTR 表示 在 写 的 时候 出现 了 中断 错误 . 
 如果 为 EPIPE 表示 网络连接 出现 了 问题 ( 对方 已经 关闭 了 连接 ) . 
 为了 处理 以上 的 情况 , 我们 自己 编写 一个 写 函数 来 处理 这 几种 情况 . 
 int   my _ write ( int   fd , void   * buffer , int   length ) 
 { 
 int   bytes _ left ; 
 int   written _ bytes ; 
 char   * ptr ; 
 ptr = buffer ; 
 bytes _ left = length ; 
 while ( bytes _ left > 0 ) 
 { 
 / *   开始 写 * / 
 written _ bytes = write ( fd , ptr , bytes _ left ) ; 
 if ( written _ bytes < = 0 )   / *   出错 了 * / 
 { 
 if ( errno = = EINTR )   / *   中断 错误   我们 继续 写 * / 
 written _ bytes = 0 ; 
 else   / *   其他 错误   没有 办法 , 只好 撤退 了 * / 
 return ( - 1 ) ; 
 } 
 bytes _ left - = written _ bytes ; 
 ptr + = written _ bytes ;   / *   从 剩下 的 地方 继续 写   * / 
 } 
 return ( 0 ) ; 
 } 
 4.2   读 函数 read 
 ssize _ t   read ( int   fd , void   * buf , size _ t   nbyte )   read 函数 是 负责 从 fd 中 读取 内容 . 当读 
 成功 时 , read 返回 实际 所读 的 字节数 , 如果 返回 的 值 是 0   表示 已经 读 到 文件 的 结束 了 , 小于 
 0 表示 出现 了 错误 . 如果 错误 为 EINTR 说明 读 是 由 中断 引起 的 ,   如果 是 ECONNREST 表示 网络 
 连接 出 了 问题 .   和 上面 一样 , 我们 也 写 一个 自己 的 读 函数 . 
 int   my _ read ( int   fd , void   * buffer , int   length ) 
 { 
 int   bytes _ left ; 
 int   bytes _ read ; 
 char   * ptr ; 
 bytes _ left = length ; 
 while ( bytes _ left > 0 ) 
 { 
 bytes _ read = read ( fd , ptr , bytes _ read ) ; 
 if ( bytes _ read < 0 ) 
 { 
 if ( errno = = EINTR ) 
 bytes _ read = 0 ; 
 else 
 return ( - 1 ) ; 
 } 
 else   if ( bytes _ read = = 0 ) 
 break ; 
 bytes _ left - = bytes _ read ; 
 ptr + = bytes _ read ; 
 } 
 return ( length - bytes _ left ) ; 
 } 
 4.3   数据 的 传递 
 有 了 上面 的 两个 函数 , 我们 就 可以 向 客户端 或者 是 服务端 传递数据 了 . 比如 我们 要 传递 一 
 个 结构 . 可以 使用 如下 方式 
 / *   客户端 向 服务端 写   * / 
 struct   my _ struct   my _ struct _ client ; 
 write ( fd , ( void   * ) & my _ struct _ client , sizeof ( struct   my _ struct ) ; 
 / *   服务端 的 读 * / 
 char   buffer [ sizeof ( struct   my _ struct ) ] ; 
 struct   * my _ struct _ server ; 
 read ( fd , ( void   * ) buffer , sizeof ( struct   my _ struct ) ) ; 
 my _ struct _ server = ( struct   my _ struct   * ) buffer ; 
 在 网络 上 传递数据 时 我们 一般 都 是 把 数据 转化 为 char 类型 的 数据 传递 . 接收 的 时候 也 是 一 
 样 的   注意 的 是 我们 没有 必要 在 网络 上 传递 指针 ( 因为 传递 指针 是 没有 任何 意义 的 , 我们 必 
 须 传递 指针 所 指向 的 内容 ) 
 5 .   用户 数据 报 发送 
 我们 前面 已经 学习 网络 程序 的 一个 很大 的 部分 , 由 这个 部分 的 知识 , 我们 实际上 可以 写出 
 大部分 的 基于 TCP 协议 的 网络 程序 了 . 现在 在 Linux 下 的 大部分 程序 都 是 用 我们 上面 所学 的 
 知识 来 写 的 . 我们 可以 去 找 一些 源程序 来 参考 一下 . 这 一章 , 我们 简单 的 学习 一下 基于 UDP 
 协议 的 网络 程序 . 
 5.1   两个 常用 的 函数 
 int   recvfrom ( int   sockfd , void   * buf , int   len , unsigned   int   flags , struct   sockaddr 
   *   from   int   * fromlen ) 
 int   sendto ( int   sockfd , const   void   * msg , int   len , unsigned   int   flags , struct   sock 
 addr   * to   int   tolen ) 
 sockfd , buf , len 的 意义 和 read , write 一样 , 分别 表示 套 接字 描述符 , 发送 或 接收 的 缓冲区 
 及 大小 . recvfrom 负责 从 sockfd 接收数据 , 如果 from 不是 NULL , 那么 在 from 里面 存储 了 信息 
 来源 的 情况 , 如果 对 信息 的 来源 不感兴趣 , 可以 将 from 和 fromlen 设置 为 NULL . sendto 负责 
 向 to 发送信息 . 此时 在 to 里面 存储 了 收 信息 方 的 详细资料 . 
 5.2   一个 实例 
 / *   服务端 程序   server . c   * / 
 # include 
 # include 
 # include 
 # include 
 # include 
 # define   SERVER _ PORT   8888 
 # define   MAX _ MSG _ SIZE   1024 
 void   udps _ respon ( int   sockfd ) 
 { 
 struct   sockaddr _ in   addr ; 
 int   addrlen , n ; 
 char   msg [ MAX _ MSG _ SIZE ] ; 
 while ( 1 ) 
 {   / *   从 网络 上度 , 写 到 网络 上面 去   * / 
 n = recvfrom ( sockfd , msg , MAX _ MSG _ SIZE , 0 , 
 ( struct   sockaddr * ) & addr , & addrlen ) ; 
 msg [ n ] = 0 ; 
 / *   显示 服务端 已经 收到 了 信息   * / 
 fprintf ( stdout , " I   have   received   % s " , msg ) ; 
 sendto ( sockfd , msg , n , 0 , ( struct   sockaddr * ) & addr , addrlen ) ; 
 } 
 } 
 int   main ( void ) 
 { 
 int   sockfd ; 
 struct   sockaddr _ in   addr ; 
 sockfd = socket ( AF _ INET , SOCK _ DGRAM , 0 ) ; 
 if ( sockfd < 0 ) 
 { 
 fprintf ( stderr , " Socket   Error : % s \ n " , strerror ( errno ) ) ; 
 exit ( 1 ) ; 
 } 
 bzero ( & addr , sizeof ( struct   sockaddr _ in ) ) ; 
 addr . sin _ family = AF _ INET ; 
 addr . sin _ addr . s _ addr = htonl ( INADDR _ ANY ) ; 
 addr . sin _ port = htons ( SERVER _ PORT ) ; 
 if ( bind ( sockfd , ( struct   sockaddr   * ) & ddr , sizeof ( struct   sockaddr _ in ) ) < 0 ) 
 { 
 fprintf ( stderr , " Bind   Error : % s \ n " , strerror ( errno ) ) ; 
 exit ( 1 ) ; 
 } 
 udps _ respon ( sockfd ) ; 
 close ( sockfd ) ; 
 } 
 / *   客户端程序   * / 
 # include 
 # include 
 # include 
 # include 
 # include 
 # include 
 # define   MAX _ BUF _ SIZE   1024 
 void   udpc _ requ ( int   sockfd , const   struct   sockaddr _ in   * addr , int   len ) 
 { 
 char   buffer [ MAX _ BUF _ SIZE ] ; 
 int   n ; 
 while ( 1 ) 
 {   / *   从 键盘 读入 , 写 到 服务端   * / 
 fgets ( buffer , MAX _ BUF _ SIZE , stdin ) ; 
 sendto ( sockfd , buffer , strlen ( buffer ) , 0 , addr , len ) ; 
 bzero ( buffer , MAX _ BUF _ SIZE ) ; 
 / *   从 网络 上读 , 写 到 屏幕 上   * / 
 n = recvfrom ( sockfd , buffer , MAX _ BUF _ SIZE , 0 , NULL , NULL ) ; 
 buffer [ n ] = 0 ; 
 fputs ( buffer , stdout ) ; 
 } 
 } 
 int   main ( int   argc , char   * * argv ) 
 { 
 int   sockfd , port ; 
 struct   sockaddr _ in   addr ; 
 if ( argc ! = 3 ) 
 { 
 fprintf ( stderr , " Usage : % s   server _ ip   server _ port \ n " , argv [ 0 ] ) ; 
 exit ( 1 ) ; 
 } 
 if ( ( port = atoi ( argv [ 2 ] ) ) < 0 ) 
 { 
 fprintf ( stderr , " Usage : % s   server _ ip   server _ port \ n " , argv [ 0 ] ) ; 
 exit ( 1 ) ; 
 } 
 sockfd = socket ( AF _ INET , SOCK _ DGRAM , 0 ) ; 
 if ( sockfd < 0 ) 
 { 
 fprintf ( stderr , " Socket   Error : % s \ n " , strerror ( errno ) ) ; 
 exit ( 1 ) ; 
 } 
 / *   填充 服务端 的 资料   * / 
 bzero ( & addr , sizeof ( struct   sockaddr _ in ) ) ; 
 addr . sin _ family = AF _ INET ; 
 addr . sin _ port = htons ( port ) ; 
 if ( inet _ aton ( argv [ 1 ] , & addr . sin _ addr ) < 0 ) 
 { 
 fprintf ( stderr , " Ip   error : % s \ n " , strerror ( errno ) ) ; 
 exit ( 1 ) ; 
 } 
 udpc _ requ ( sockfd , & addr , sizeof ( struct   sockaddr _ in ) ) ; 
 close ( sockfd ) ; 
 } 
 ###########   编译 文件   Makefile   ########## 
 all : server   client 
 server : server . c 
 gcc   - o   server   server . c 
 client : client . c 
 gcc   - o   client   client . c 
 clean : 
 rm   - f   server 
 rm   - f   client 
 rm   - f   core 
 上面 的 实例 如果 大家 编译 运行 的话 , 会 发现 一个 小 问题 的 .   在 我 机器 上面 , 我先 运行 服务 
 端 , 然后 运行 客户端 . 在 客户端 输入 信息 , 发送到 服务端 ,   在 服务端 显示 已经 收到 信息 , 但 
 是 客户端 没有 反映 . 再 运行 一个 客户端 , 向 服务端 发出 信息   却 可以 得到 反应 . 我 想 可能 是 
 第一个 客户端 已经 阻塞 了 . 如果 谁 知道 怎么 解决 的话 , 请 告诉 我 , 谢谢 .   由于 UDP 协议 是 不 
 保证 可靠 接收数据 的 要求 , 所以 我们 在 发送信息 的 时候 , 系统 并 不 能够 保证 我们 发出 的 信 
 息 都 正确 无误 的 到达 目的地 . 一般 的 来说 我们 在 编写 网络 程序 的 时候 都 是 选用 TCP 协议 的 
 .   
 
 - - 
 ※   来源 : ・ 日月 光华 站   bbs . fudan . edu . cn ・ [ FROM :   202.119 . 32.102 ] 
 
   
 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 [ 返回 上 一页 ]   [ 本 讨论区 ]